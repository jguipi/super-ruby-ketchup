require 'rails_helper'
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PointServicesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # PointService. As you add validations to PointService, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    @organisme = Organisme.create( "name" => "OrganismeNom", "mail" => "mail@gmail.com", "fax" => "450-450-4545", "telephone" => "450-444-4444", "adresse" => "uneAdresse")
    {"nom" => "pointService Nom", "courriel" => "uncourriel@gmail.com", "telephone" =>"450-468-9000", "organisme_id" => @organisme.id}

  }

  let(:invalid_attributes) {
    @organisme = Organisme.create( "name" => "OrganismeNom", "mail" => "mail@gmail.com", "fax" => "450-450-4545", "telephone" => "450-444-4444", "adresse" => "uneAdresse")
    {"nom" => "", "courriel" => "uncourriel@gmail.com", "telephone" =>"450-468-9000"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PointServicesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all point_services as @point_services" do
      point_service = PointService.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:point_services)).to eq([point_service])
    end
  end

  describe "GET #show" do
    it "assigns the requested point_service as @point_service" do
      point_service = PointService.create! valid_attributes
      get :show, params: {id: point_service.to_param, organisme_id: point_service.organisme_id}, session: valid_session
      expect(assigns(:point_service)).to eq(point_service)
    end
  end

  describe "GET #new" do
    it "assigns a new point_service as @point_service" do
      pointService = PointService.create! valid_attributes
      get :new, params: {:point_service => pointService, :organisme_id => pointService.organisme.id}, session: valid_session
      expect(assigns(:point_service)).to be_a_new(PointService)
    end
  end

  describe "GET #edit" do
    it "assigns the requested point_service as @point_service" do
      point_service = PointService.create! valid_attributes
      get :edit, params: {id: point_service.to_param, organisme_id: point_service.organisme.id}, session: valid_session
      expect(assigns(:point_service)).to eq(point_service)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new PointService" do
        organisme = Organisme.create( "name" => "OrganismeNom", "mail" => "mail@gmail.com", "fax" => "450-450-4545", "telephone" => "450-444-4444", "adresse" => "uneAdresse")
        adresse = Adresse.create(:rue => "Une rue", :codePostal => "J4M 1Y6", :ville => "Longueuil", :pays => "Canada")
        point_service = PointService.create("nom" => "pointService Nom", "courriel" => "uncourriel@gmail.com", "telephone" =>"450-468-9000", "organisme_id" => organisme.id, "adresse" => adresse)
        expect {
          post :create, params: {:point_service => valid_attributes, organisme_id: point_service.organisme_id}, session: valid_session
        }.to change(PointService, :count).by(1)
      end

      it "assigns a newly created point_service as @point_service" do
        post :create, params: {point_service: valid_attributes, organisme_id: @organisme.id}, session: valid_session
        expect(assigns(:point_service)).to be_a(PointService)
        expect(assigns(:point_service)).to be_persisted
      end

      it "redirects to the organisme list" do
        post :create, params: {point_service: valid_attributes, organisme_id: @organisme.id}, session: valid_session
        expect(response).to redirect_to(organisme_path(@organisme.id))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved point_service as @point_service" do
        post :create, params: {point_service: invalid_attributes, organisme_id: @organisme.id}, session: valid_session
        expect(assigns(:point_service)).to be_a_new(PointService)
      end

      it "re-renders the 'new' template" do
        post :create, params: {point_service: invalid_attributes, organisme_id: @organisme.id}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {"nom" => "pointService Nom UPDATE", "courriel" => "uncourriel@gmail.com", "telephone" =>"450-468-9000"}
      }

      it "updates the requested point_service" do
        point_service = PointService.create! valid_attributes
        put :update, params: {id: point_service.to_param, point_service: new_attributes, organisme_id: point_service.organisme_id}, session: valid_session
        point_service.reload
      end

      it "assigns the requested point_service as @point_service" do
        point_service = PointService.create! valid_attributes
        put :update, params: {id: point_service.to_param, point_service: valid_attributes}, session: valid_session
        expect(assigns(:point_service)).to eq(point_service)
      end

      it "redirects to the point_service" do
        point_service = PointService.create! valid_attributes
        put :update, params: {id: point_service.to_param, point_service: valid_attributes}, session: valid_session
        expect(response).to redirect_to(organisme_point_service_path(point_service.organisme_id, point_service.id))
      end
    end

    context "with invalid params" do
      it "assigns the point_service as @point_service" do
        point_service = PointService.create! valid_attributes
        put :update, params: {id: point_service.to_param, point_service: invalid_attributes}, session: valid_session
        expect(assigns(:point_service)).to eq(point_service)
      end

      it "re-renders the 'edit' template" do
        point_service = PointService.create! valid_attributes
        put :update, params: {id: point_service.to_param, point_service: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested point_service" do
      point_service = PointService.create! valid_attributes
      expect {
        delete :destroy, params: {id: point_service.to_param}, session: valid_session
      }.to change(PointService, :count).by(-1)
    end

    it "redirects to the point_services list" do
      point_service = PointService.create! valid_attributes
      delete :destroy, params: {id: point_service.to_param}, session: valid_session
      expect(response).to redirect_to(organisme_path(point_service.organisme_id))
    end
  end

end
