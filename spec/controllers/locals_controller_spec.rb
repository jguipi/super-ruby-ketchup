require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LocalsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Local. As you add validations to Local, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    organisme = Organisme.create(:name => 'test', :mail => 'test@test.com')
    organisme.save()
    point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
    point_service.save()
    @organisme = organisme
    @point_service = point_service
    {"nom" => "unNomDeLocal", "nombrePlaces" => 10, "point_service_id" => point_service.id}
  }

  let(:set_up_point_service) {
    organisme = Organisme.create(:name => 'test', :mail => 'test@test.com')
    organisme.save()
    point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
    point_service.save()
    @organisme = organisme
    @point_service = point_service
  }

  let(:set_up_service) {
    @service = Service.create(:nom => "Service", :description => "Description de service")
  }

  let(:invalid_attributes) {
    organisme = Organisme.create(:name => 'test', :mail => 'test@test.com');
    organisme.save()
    point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
    point_service.save()
    @organisme = organisme
    @point_service = point_service
    {"nom" => "", "nombrePlaces" => 0}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LocalsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all locals as @locals" do
      local = Local.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:locals)).to eq([local])
    end
  end

  describe "GET #show" do
    it "assigns the requested local as @local" do
      local = Local.create! valid_attributes
      get :show, params: {id: local.to_param, point_service_id: local.point_service_id}, session: valid_session
      expect(assigns(:local)).to eq(local)
    end
  end

  describe "GET #new" do
    it "assigns a new local as @local" do
      organisme = Organisme.create(:name => 'test', :mail => 'test@test.com')
      organisme.save()
      point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
      point_service.save()
      get :new, params: {point_service_id: point_service.id, organisme_id: organisme.id}, session: valid_session
      expect(assigns(:local)).to be_a_new(Local)
    end
  end

  describe "GET #edit" do
    it "assigns the requested local as @local" do
      local = Local.create! valid_attributes
      get :edit, params: {id: local.to_param, point_service_id: local.point_service_id}, session: valid_session
      expect(assigns(:local)).to eq(local)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Local" do
        organisme = Organisme.create(:name => 'test', :mail => 'test@test.com')
        organisme.save()
        point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
        point_service.save()
        expect {
          post :create, params: {local: valid_attributes, point_service_id: point_service.id}, session: valid_session
        }.to change(Local, :count).by(1)
      end

      it "assigns a newly created local as @local" do
        organisme = Organisme.create(:name => 'test', :mail => 'test@test.com')
        organisme.save()
        point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
        point_service.save()
        post :create, params: {local: valid_attributes, point_service_id: point_service.id}, session: valid_session
        expect(assigns(:local)).to be_a(Local)
        expect(assigns(:local)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved local as @local" do
        set_up_point_service()
        post :create, params: {local: invalid_attributes, point_service_id: @point_service.id}, session: valid_session
        expect(assigns(:local)).to be_a_new(Local)
      end

      it "re-renders the 'new' template" do
        set_up_point_service()
        post :create, params: {local: invalid_attributes, point_service_id: @point_service.id}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {"nom" => "UNNouveauNom", "nombrePlaces" => 40}
      }

      it "updates the requested local" do
        local = Local.create! valid_attributes
        put :update, params: {id: local.to_param, local: new_attributes, point_service_id: local.point_service_id}, session: valid_session
        local.reload
      end

      it "assigns the requested local as @local" do
        local = Local.create! valid_attributes
        put :update, params: {id: local.to_param, local: valid_attributes, point_service_id: local.point_service_id}, session: valid_session
        expect(assigns(:local)).to eq(local)
      end

      it "redirects to the point service page" do
        local = Local.create! valid_attributes
        put :update, params: {id: local.to_param, local: valid_attributes, point_service_id: local.point_service_id}, session: valid_session
        expect(response).to redirect_to(organisme_point_service_path(@organisme.id, @point_service.id))
      end
    end

    context "with invalid params" do
      it "assigns the local as @local" do
        local = Local.create! valid_attributes
        put :update, params: {id: local.to_param, local: invalid_attributes, point_service_id: local.point_service_id}, session: valid_session
        expect(assigns(:local)).to eq(local)
      end

      it "re-renders the 'edit' template" do
        local = Local.create! valid_attributes
        put :update, params: {id: local.to_param, local: invalid_attributes, point_service_id: local.point_service_id}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested local" do
      local = Local.create! valid_attributes
      expect {
        delete :destroy, params: {id: local.to_param}, session: valid_session
      }.to change(Local, :count).by(-1)
    end

    it "redirects to the locals list" do
      local = Local.create! valid_attributes
      delete :destroy, params: {id: local.to_param}, session: valid_session
      expect(response).to redirect_to(locals_url)
    end
  end

  describe "Services associated with locals" do
    it "add service to local" do
      set_up_service()
      local = Local.create! valid_attributes
      expect {
        post :add_service_to_local, params: {organisme_id: @organisme.id, id: local.id, point_service_id: local.point_service_id, ServiceID: @service.id}, session: valid_session
      }.to change(local.services, :count).by(1)
    end

    it "remove service to local" do
      set_up_service()
      local = Local.create! valid_attributes
      expect {
        post :add_service_to_local, params: {organisme_id: @organisme.id, id: local.id, point_service_id: local.point_service_id, ServiceID: @service.id}, session: valid_session
      }.to change(local.services, :count).by(1)
      expect {
        post :remove_service_from_local, params: {organisme_id: @organisme.id, id: local.id, point_service_id: local.point_service_id, ServiceID: @service.id}, session: valid_session
      }.to change(local.services, :count).by(-1)
    end
  end

end
