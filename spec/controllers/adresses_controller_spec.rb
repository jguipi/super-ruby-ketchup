require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AdressesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Adresse. As you add validations to Adresse, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    organisme = Organisme.create( "name" => "OrganismeNom", "mail" => "mail@gmail.com", "fax" => "450-450-4545", "telephone" => "450-444-4444", "adresse" => "uneAdresse")
    @point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
    {"rue" => "1111 Imaginaire", "ville" => "Longueuil", "pays" => "Canada", "codePostal" => "JJJ AAA", "point_service_id" => @point_service.id}
  }

  let(:set_point_service) {
    organisme = Organisme.create( "name" => "OrganismeNom", "mail" => "mail@gmail.com", "fax" => "450-450-4545", "telephone" => "450-444-4444", "adresse" => "uneAdresse")
    @point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
  }

  let(:invalid_attributes) {
    {"rue" => 3, "ville" => "Longueuil", "pays" => "Canada", "codePostal" => "JJJ AAA"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AdressesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all adresses as @adresses" do
      adresse = Adresse.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:adresses)).to eq([adresse])
    end
  end

  describe "GET #show" do
    it "assigns the requested adresse as @adresse" do
      adresse = Adresse.create! valid_attributes
      get :show, params: {id: adresse.to_param}, session: valid_session
      expect(assigns(:adress)).to eq(adresse)
    end
  end

  describe "GET #new" do
    it "assigns a new adresse as @adresse" do
      get :new, params: {}, session: valid_session
      adress = Adresse.new valid_attributes
      expect(adress).to be_a_new(Adresse)
    end
  end

  describe "GET #edit" do
    it "assigns the requested adresse as @adresse" do
      adresse = Adresse.create! valid_attributes
      get :edit, params: {id: adresse.to_param}, session: valid_session
      expect(assigns(:adress)).to eq(adresse)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Adresse" do

        expect {
          post :create, params: {adress: valid_attributes}, session: valid_session
        }.to change(Adresse, :count).by(1)
      end

      it "assigns a newly created adresse as @adresse" do
        post :create, params: {adress: valid_attributes}, session: valid_session
        expect(assigns(:adress)).to be_a(Adresse)
        expect(assigns(:adress)).to be_persisted
      end

      it "redirects to the created adresse" do
        post :create, params: {adress: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Adresse.last)
      end
    end

  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        organisme = Organisme.create( "name" => "OrganismeNom", "mail" => "mail@gmail.com", "fax" => "450-450-4545", "telephone" => "450-444-4444", "adresse" => "uneAdresse")
        @point_service = PointService.create(:nom => "localNom", :courriel => "uncourriel@gamil.com", :organisme => organisme)
        {"rue" => "1111 Imaginaire updater", "ville" => "Longueuil", "pays" => "Canada", "codePostal" => "JJJ AAA", "point_service_id" => @point_service.id}
      }

      it "updates the requested adresse" do
        adresse = Adresse.create! valid_attributes
        put :update, params: {id: adresse.to_param, adress: new_attributes}, session: valid_session
        adresse.reload
      end

      it "assigns the requested adresse as @adresse" do
        adresse = Adresse.create! valid_attributes
        put :update, params: {id: adresse.to_param, adress: valid_attributes}, session: valid_session
        expect(assigns(:adress)).to eq(adresse)
      end

      it "redirects to the adresse" do
        adresse = Adresse.create! valid_attributes
        put :update, params: {id: adresse.to_param, adress: valid_attributes}, session: valid_session
        expect(response).to redirect_to(adresse)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested adresse" do
      adresse = Adresse.create! valid_attributes
      expect {
        delete :destroy, params: {id: adresse.to_param}, session: valid_session
      }.to change(Adresse, :count).by(-1)
    end

    it "redirects to the adresses list" do
      adresse = Adresse.create! valid_attributes
      delete :destroy, params: {id: adresse.to_param}, session: valid_session
      expect(response).to redirect_to(adresses_url)
    end
  end

end
